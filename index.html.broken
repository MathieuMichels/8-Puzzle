<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>8-Puzzle Game</title>
    <link rel="stylesheet" href="assets/css/style.css">
    <link rel="icon" href="logo.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="icons/icon-192x192.svg">
    <meta name="theme-color" content="#3498db">
    <link rel="manifest" href="manifest.json">
    <meta name="description" content="Jeu de puzzle √† 8 pi√®ces avec diff√©rents niveaux de difficult√©">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container">
        <h1>üß© 8-Puzzles </h1>
        
        <div class="game-section">
            <div class="puzzle-container">
                <div class="puzzle-grid" id="puzzleGrid"></div>
            </div>

            <div class="info">
                <span>Mouvements: <span id="moveCount">0</span></span>
                <span>Minimum: <span id="minMoves">0</span></span>
                <span>Temps: <span id="timer">00:00</span></span>
            </div>

            <div class="status" id="status">Cliquez sur une tuile adjacente √† l'espace vide pour la d√©placer</div>

            <div class="difficulty-selector">
                <label for="difficulty">Difficult√© :</label>
                <select id="difficulty" class="difficulty-select">
                    <option value="very-easy">Tr√®s facile (< 5 coups)</option>
                    <option value="easy">Facile (5-9 coups)</option>
                    <option value="medium" selected>Moyen (10-14 coups)</option>
                    <option value="hard">Difficile (15-19 coups)</option>
                    <option value="very-hard">Tr√®s difficile (20-24 coups)</option>
                    <option value="extreme">Extr√™me (25+ coups)</option>
                    <option value="custom">Personnalis√©</option>
                    <option value="random">Al√©atoire</option>
                </select>
                <div id="customMovesContainer" style="display: none; margin-top: 10px;">
                    <label for="customMoves">Nombre de coups:</label>
                    <input type="number" id="customMoves" min="0" max="31" value="15" style="width: 60px;">
                </div>
            </div>

            <div class="controls">
                <button class="btn-primary" id="shuffleBtn">üîÑ M√©langer</button>
                <button class="btn-secondary" id="solveBtn">ü§ñ R√©soudre</button>
                <button class="btn-danger" id="stopBtn">‚èπÔ∏è Arr√™ter</button>
            </div>
            
            <div class="goal-state">
                <h3>√âtat final :</h3>
                <div class="goal-grid">
                    <div class="goal-tile">1</div>
                    <div class="goal-tile">2</div>
                    <div class="goal-tile">3</div>
                    <div class="goal-tile">4</div>
                    <div class="goal-tile">5</div>
                    <div class="goal-tile">6</div>
                    <div class="goal-tile">7</div>
                    <div class="goal-tile">8</div>
                    <div class="goal-tile empty"></div>
                </div>
            </div>
        </div>
        
        <div class="stats-section">
            <div class="chart-container">
                <canvas id="movesChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Load in correct order: first define the variable, then Chart class, then use it -->
    <script src="assets/js/script.js"></script>
    <script src="assets/js/chart.js"></script>
    
    <!-- Service Worker Registration -->
    <script>
        // √âtat de la connexion
        let appIsOnline = navigator.onLine;
        
        // Cr√©er une notification pour le statut hors ligne
        function createOfflineNotification() {
            const offlineDiv = document.createElement('div');
            offlineDiv.id = 'offline-notification';
            offlineDiv.style.position = 'fixed';
            offlineDiv.style.top = '0';
            offlineDiv.style.left = '0';
            offlineDiv.style.right = '0';
            offlineDiv.style.backgroundColor = '#f44336';
            offlineDiv.style.color = 'white';
            offlineDiv.style.textAlign = 'center';
            offlineDiv.style.padding = '12px';
            offlineDiv.style.zIndex = '9999';
            offlineDiv.style.display = 'none';
            offlineDiv.style.transition = 'all 0.3s ease-in-out';
            offlineDiv.textContent = 'Vous √™tes hors ligne. L\'application fonctionne en mode hors connexion.';
            document.body.appendChild(offlineDiv);
            return offlineDiv;
        }
        
        // Notification pour les mises √† jour disponibles
        function createUpdateNotification() {
            const updateDiv = document.createElement('div');
            updateDiv.id = 'update-notification';
            updateDiv.style.position = 'fixed';
            updateDiv.style.bottom = '20px';
            updateDiv.style.left = '50%';
            updateDiv.style.transform = 'translateX(-50%)';
            updateDiv.style.backgroundColor = '#4CAF50';
            updateDiv.style.color = 'white';
            updateDiv.style.textAlign = 'center';
            updateDiv.style.padding = '15px 20px';
            updateDiv.style.borderRadius = '5px';
            updateDiv.style.boxShadow = '0 2px 10px rgba(0,0,0,0.3)';
            updateDiv.style.zIndex = '9999';
            updateDiv.style.display = 'none';
            updateDiv.innerHTML = 'Une nouvelle version est disponible! <button id="update-button" style="margin-left: 10px; background: white; color: #4CAF50; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer;">Mettre √† jour</button>';
            document.body.appendChild(updateDiv);
            
            document.getElementById('update-button').addEventListener('click', () => {
                if (registration && registration.waiting) {
                    // Envoyer un message au worker en attente
                    registration.waiting.postMessage({ action: 'skipWaiting' });
                    updateDiv.style.display = 'none';
                    
                    // Afficher un message de chargement
                    const loadingDiv = document.createElement('div');
                    loadingDiv.style.position = 'fixed';
                    loadingDiv.style.bottom = '20px';
                    loadingDiv.style.left = '50%';
                    loadingDiv.style.transform = 'translateX(-50%)';
                    loadingDiv.style.backgroundColor = '#2196F3';
                    loadingDiv.style.color = 'white';
                    loadingDiv.style.padding = '15px 20px';
                    loadingDiv.style.borderRadius = '5px';
                    loadingDiv.style.zIndex = '9999';
                    loadingDiv.textContent = 'Mise √† jour en cours...';
                    document.body.appendChild(loadingDiv);
                    
                    // Supprimer le message apr√®s 3 secondes
                    setTimeout(() => {
                        if (loadingDiv.parentNode) {
                            loadingDiv.parentNode.removeChild(loadingDiv);
                        }
                    }, 3000);
                }
            });
            
            return updateDiv;
        }
        
        // Initialiser les notifications
        const offlineNotification = createOfflineNotification();
        const updateNotification = createUpdateNotification();
        
        // Mettre √† jour l'affichage du statut de connexion
        function updateOnlineStatus() {
            appIsOnline = navigator.onLine;
            if (appIsOnline) {
                offlineNotification.style.display = 'none';
            } else {
                offlineNotification.style.display = 'block';
            }
        }
        
        // √âcouter les changements de connectivit√©
        window.addEventListener('online', updateOnlineStatus);
        window.addEventListener('offline', updateOnlineStatus);
        
        // Variable pour stocker la r√©f√©rence d'enregistrement
        let registration;
        
        if ('serviceWorker' in navigator) {
            console.log('üéØ Service Worker support√©');
            
            function registerServiceWorker() {
                console.log('üìÑ Enregistrement Service Worker d√©marr√©');
                
                navigator.serviceWorker.register('./service-worker.js', {
                    scope: './'
                })
                .then(reg => {
                    registration = reg;
                    console.log('‚úÖ Service Worker enregistr√© avec succ√®s!');
                    console.log('üéØ Scope:', reg.scope);
                    console.log('üìÑ Script URL:', reg.active?.scriptURL || 'En cours d\'installation...');
                    
                    // Gestion des mises √† jour
                    reg.addEventListener('updatefound', () => {
                        console.log('üîÑ Nouvelle version d√©tect√©e!');
                        const newWorker = reg.installing;
                        
                        newWorker.addEventListener('statechange', () => {
                            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                                console.log('üÜï Nouvelle version pr√™te!');
                                updateNotification.style.display = 'block';
                            }
                        });
                    });
                    
                    // V√©rification p√©riodique des mises √† jour
                    setInterval(() => {
                        if (registration) {
                            registration.update().catch(console.error);
                        }
                    }, 60000);
                    
                    return reg.update();
                })
                .catch(error => {
                    console.error('‚ùå √âchec de l\'enregistrement du Service Worker:', error);
                });
            }
            
            // Enregistrer imm√©diatement si le document est pr√™t, sinon attendre
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', registerServiceWorker);
            } else {
                registerServiceWorker();
            }
        } else {
            console.log('‚ùå Service Worker non support√©');
        }
                    .then(() => {
                        console.log('V√©rification de mise √† jour termin√©e');
                        
                        // V√©rifier les mises √† jour p√©riodiquement
                        setInterval(() => {
                            if (registration) {
                                registration.update().catch(console.error);
                            }
                        }, 60000); // V√©rifier toutes les minutes
                        
                        // V√©rifier les mises √† jour disponibles
                        reg.addEventListener('updatefound', () => {
                            const newWorker = reg.installing;
                            console.log('Nouvelle version d√©tect√©e!');
                            
                            // Surveiller les changements d'√©tat du nouveau worker
                            newWorker.addEventListener('statechange', () => {
                                console.log('√âtat du nouveau worker:', newWorker.state);
                                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                                    // Une mise √† jour est disponible
                                    console.log('Nouvelle version pr√™te √† √™tre install√©e!');
                                    updateNotification.style.display = 'block';
                                }
                            });
                        });
                        
                        // V√©rifier imm√©diatement s'il y a une mise √† jour en attente
                        if (reg.waiting) {
                            console.log('Mise √† jour d√©j√† en attente');
                            updateNotification.style.display = 'block';
                        }
                    })
                    .catch(error => {
                        console.log('√âchec de l\'enregistrement du Service Worker:', error);
                    });
                    
                // √âcouter les messages du service worker
                navigator.serviceWorker.addEventListener('message', event => {
                    console.log('Message re√ßu du Service Worker:', event.data);
                    if (event.data.type === 'OFFLINE') {
                        appIsOnline = false;
                        offlineNotification.style.display = 'block';
                    } else if (event.data.type === 'ONLINE') {
                        appIsOnline = true;
                        offlineNotification.style.display = 'none';
                    } else if (event.data.type === 'SW_UPDATED') {
                        console.log('Service Worker mis √† jour');
                    }
                });
                
                // √âcouter les √©v√©nements de contr√¥le (apr√®s skipWaiting)
                navigator.serviceWorker.addEventListener('controllerchange', () => {
                    console.log('Nouveau contr√¥leur Service Worker d√©tect√©');
                    // Rafra√Æchir pour utiliser la nouvelle version
                    window.location.reload();
                });
                
                // V√©rifier p√©riodiquement l'√©tat de connexion
                setInterval(() => {
                    if (registration) {
                        registration.active?.postMessage({ action: 'checkOnlineStatus' });
                    }
                }, 30000); // V√©rifier toutes les 30 secondes
            });
        }
    </script>
    
    <!-- Installation PWA prompt -->
    <div id="installPrompt" style="display: none; position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); background-color: #3498db; color: white; padding: 15px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.2); z-index: 1000;">
        <p style="margin: 0 0 10px 0">Installez 8-Puzzle sur votre appareil!</p>
        <div style="display: flex; justify-content: space-between;">
            <button id="installBtn" style="background: white; color: #3498db; border: none; padding: 8px 15px; border-radius: 4px; cursor: pointer;">Installer</button>
            <button id="dismissBtn" style="background: transparent; color: white; border: 1px solid white; padding: 8px 15px; margin-left: 10px; border-radius: 4px; cursor: pointer;">Plus tard</button>
        </div>
    </div>
    
    <script>
        // Gestion de l'installation PWA
        let deferredPrompt;
        const installPrompt = document.getElementById('installPrompt');
        const installBtn = document.getElementById('installBtn');
        const dismissBtn = document.getElementById('dismissBtn');
        
        window.addEventListener('beforeinstallprompt', (e) => {
            // Emp√™cher l'affichage automatique de la bo√Æte de dialogue
            e.preventDefault();
            // Stocker l'√©v√©nement pour une utilisation ult√©rieure
            deferredPrompt = e;
            // Afficher notre bouton personnalis√©
            installPrompt.style.display = 'block';
        });
        
        installBtn.addEventListener('click', async () => {
            // Masquer notre interface utilisateur personnalis√©e
            installPrompt.style.display = 'none';
            // Afficher la bo√Æte de dialogue d'installation
            deferredPrompt.prompt();
            // Attendre la d√©cision de l'utilisateur
            const { outcome } = await deferredPrompt.userChoice;
            // On n'a plus besoin de conserver l'√©v√©nement
            deferredPrompt = null;
        });
        
        dismissBtn.addEventListener('click', () => {
            // Masquer l'interface utilisateur d'installation
            installPrompt.style.display = 'none';
            // L'utilisateur peut toujours installer via le menu du navigateur
        });
        
        // Si l'application est d√©j√† install√©e, l'√©v√©nement 'appinstalled' sera d√©clench√©
        window.addEventListener('appinstalled', (evt) => {
            // L'application a √©t√© install√©e avec succ√®s
            console.log('8-Puzzle install√© avec succ√®s');
        });
    </script>
</body>
</html>